<?xml version="1.0" encoding="UTF8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jc.mapper.BlogMapper">
<!--
sql语句片段：可以实现复用的效果;一般不包含‘where’标签（不方便复用）
-->
    <sql id="one">
        <choose>
            <when test="title != null">
                title=#{title}
            </when>
            <when test="author != null">
                author=#{author}
            </when>
            <otherwise>
                views=#{views}
            </otherwise>
        </choose>

    </sql>

    <sql id="two">
        <if test="author !=null">
            author !=#{author}
        </if>
        and

        <foreach collection="ids" item="id" open="(" close=")" separator="or">
            id =#{id}
        </foreach>
    </sql>


    <insert id="addBlog" parameterType="blog">

        insert into blog (id,title,author,create_time,views)
        values (#{id},#{title},#{author},#{createTime},#{views})
    </insert>

<!--    动态"if"-sql语句
下面两者可以相互替代，这个自己私下调试一下即可。

  select * from blog
        <where>
            <if test="author !=null">
                and author =#{author}
            </if>
            <if test="views !=null">
                and views =#{views}
            </if>
        </where>


  select * from blog where 1=1
            <if test="author !=null">
                and author =#{author}
            </if>
            <if test="views !=null">
                and views =#{views}
            </if>



-->
    <select id="selectBlogsIf" parameterType="map" resultType="blog">
        select * from blog
        <where>
            <if test="author !=null">
                author =#{author}
            </if>
            <if test="views !=null">
                and views =#{views}
            </if>
        </where>


    </select>



<!--
choose、when、otherwise 组合：
有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。（类似于switch语句）
    传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author” 查找的情形。
若两者都没有传入，则按照otherwise查找

心得：即使xml中有配置不对的地方，通过debug的不断反馈也可以将其逐渐修改好！

-->


    <select id="selectBlogsChoose" parameterType="map" resultType="blog">
        select * from blog
        <where>
           <include refid="one"></include>
        </where>
    </select>


    
<!--
    用于动态更新语句的类似解决方案叫做 set,set 元素会动态地在行首插入 SET 关键字。

 -->
    <update id="updateBlog" parameterType="map">
        update blog
        <set>
            <if test="title != null">
                title=#{title},
            </if>
            <if test="author != null">
                author=#{author},
            </if>
            <if test="views != null">
                views=#{views}
            </if>
        </set>
        where id =#{id}
    </update>



<!--
foreach的使用：
-->
    <select id="selectBlogForeach" parameterType="map" resultType="blog">
        select * from blog
        <where>
           <include refid="two"></include>
        </where>


    </select>




</mapper>
